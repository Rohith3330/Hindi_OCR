def segmentation(bordered, thresh=255, min_seg=2.22222222, scheck=0.1):
        try:
            shape = bordered.shape
            # print(shape)
            print(shape)
            check = int(scheck * shape[0])
            image = bordered[:]
            image = image[check:].T
            shape = image.shape
            #plt.imshow(image)
            #plt.show()

            #find the background color for empty column
            bg = np.repeat(255 - thresh, shape[1])
            bg_keys = []
            for row in range(1, shape[0]):
                # cv2_imshow(image[row]-255)
                # print(image[row]-255)
                # print(bg)
                if  (np.equal(bg, image[row]).all()):
                        bg_keys.append(row)            

                lenkeys = len(bg_keys)-1
                if len(bg_keys)>1:
                    new_keys = [bg_keys[1], bg_keys[-1]]
                else:
                    new_keys=[0,shape[1]]
                #print(lenkeys)
            for i in range(1, lenkeys):
                if (bg_keys[i+1] - bg_keys[i]) > check:
                    new_keys.append(bg_keys[i])
                    #print(i)

            new_keys = sorted(new_keys)
            #print(new_keys)
            segmented_templates = []
            first = 0
            bounding_boxes = []
            for key in new_keys[1:]:
                segment = bordered.T[first:key]
                if segment.shape[0]>=min_seg and segment.shape[1]>=min_seg:
                    segmented_templates.append(segment.T)
                    if(first-key>0.8*shape[0]):
                        continue
                    bounding_boxes.append((first, key))
                first = key
            
            last_segment = bordered.T[new_keys[-1]:]
            if last_segment.shape[0]>=min_seg and last_segment.shape[1]>=min_seg:
                segmented_templates.append(last_segment.T)
                bounding_boxes.append((new_keys[-1], new_keys[-1]+last_segment.shape[0]))


            return(segmented_templates, bounding_boxes)
        except:
            # print(1)
            return [bordered, (0, bordered.shape[1])]
    char_images=[]
    for i in l:
        img=i
        gray_image = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
        prepimg, tb, lr = preprocess(gray_image)
        # cv2_imshow(prepimg)
        segments=segmentation(prepimg,255)
        l1=[]
        for simg in segments[0]:
            # cv2_imshow(simg)
            l1.append(simg)
            # plt.show()
        for i in l1:
            k=segmentation(i,255,0.00000000094,0.3333)
            for j in k[0]:
                j=cv2.resize(j,(32,32))
                # j=j.astype('float32')/255
                char_images.append(j)
        # cv2_imshow(j)
    print(len(char_images))
    x_train=np.zeros((len(char_images),32,32),dtype=np.uint8)
    for i in range(len(char_images)):
        x_train[i]=char_images[i]
    x_train=x_train.astype('float32')/255
    x_train=x_train.reshape((-1,32,32,1))
    model = keras.models.load_model("/content/sample_data/model1.h5")
    y=model.predict(x_train)
    print(y.argmax())
